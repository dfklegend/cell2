// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cproto {

  /// <summary>Holder for reflection information generated from data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpkYXRhLnByb3RvEgZjcHJvdG8iKwoJU2tpbGxTbG90Eg8KB1NraWxsSWQY",
            "ASABKAkSDQoFTGV2ZWwYAiABKAUiHAoJRXF1aXBTbG90Eg8KB0VxdWlwSWQY",
            "ASABKAkiJgoIU3RhdEluZm8SCwoDV2luGAEgASgFEg0KBVRvdGFsGAIgASgF",
            "IusBCghDaGFyQ2FyZBIKCgJJZBgBIAEoBRIMCgROYW1lGAIgASgJEg0KBUxl",
            "dmVsGAMgASgFEiYKC05vcm1hbFNraWxsGAQgASgLMhEuY3Byb3RvLlNraWxs",
            "U2xvdBIhCgZTa2lsbHMYBSADKAsyES5jcHJvdG8uU2tpbGxTbG90EigKDXBh",
            "c3NpdmVTa2lsbHMYBiADKAsyES5jcHJvdG8uU2tpbGxTbG90EiEKBkVxdWlw",
            "cxgHIAMoCzIRLmNwcm90by5FcXVpcFNsb3QSHgoEU3RhdBgIIAEoCzIQLmNw",
            "cm90by5TdGF0SW5mb0IVWhNtbW8vbWVzc2FnZXMvY3Byb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cproto.SkillSlot), global::Cproto.SkillSlot.Parser, new[]{ "SkillId", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cproto.EquipSlot), global::Cproto.EquipSlot.Parser, new[]{ "EquipId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cproto.StatInfo), global::Cproto.StatInfo.Parser, new[]{ "Win", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cproto.CharCard), global::Cproto.CharCard.Parser, new[]{ "Id", "Name", "Level", "NormalSkill", "Skills", "PassiveSkills", "Equips", "Stat" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 定义数据结构，可以暂时共用的
  /// </summary>
  public sealed partial class SkillSlot : pb::IMessage<SkillSlot> {
    private static readonly pb::MessageParser<SkillSlot> _parser = new pb::MessageParser<SkillSlot>(() => new SkillSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cproto.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSlot(SkillSlot other) : this() {
      skillId_ = other.skillId_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSlot Clone() {
      return new SkillSlot(this);
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private string skillId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId.Length != 0) hash ^= SkillId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SkillId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillSlot other) {
      if (other == null) {
        return;
      }
      if (other.SkillId.Length != 0) {
        SkillId = other.SkillId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SkillId = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipSlot : pb::IMessage<EquipSlot> {
    private static readonly pb::MessageParser<EquipSlot> _parser = new pb::MessageParser<EquipSlot>(() => new EquipSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cproto.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipSlot(EquipSlot other) : this() {
      equipId_ = other.equipId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipSlot Clone() {
      return new EquipSlot(this);
    }

    /// <summary>Field number for the "EquipId" field.</summary>
    public const int EquipIdFieldNumber = 1;
    private string equipId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipId {
      get { return equipId_; }
      set {
        equipId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipId != other.EquipId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipId.Length != 0) hash ^= EquipId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EquipId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipSlot other) {
      if (other == null) {
        return;
      }
      if (other.EquipId.Length != 0) {
        EquipId = other.EquipId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EquipId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 统计数据
  /// </summary>
  public sealed partial class StatInfo : pb::IMessage<StatInfo> {
    private static readonly pb::MessageParser<StatInfo> _parser = new pb::MessageParser<StatInfo>(() => new StatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cproto.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatInfo(StatInfo other) : this() {
      win_ = other.win_;
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatInfo Clone() {
      return new StatInfo(this);
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 1;
    private int win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "Total" field.</summary>
    public const int TotalFieldNumber = 2;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Win != other.Win) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Win != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Win);
      }
      if (Total != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Win = input.ReadInt32();
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharCard : pb::IMessage<CharCard> {
    private static readonly pb::MessageParser<CharCard> _parser = new pb::MessageParser<CharCard>(() => new CharCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cproto.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCard(CharCard other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      level_ = other.level_;
      normalSkill_ = other.normalSkill_ != null ? other.normalSkill_.Clone() : null;
      skills_ = other.skills_.Clone();
      passiveSkills_ = other.passiveSkills_.Clone();
      equips_ = other.equips_.Clone();
      stat_ = other.stat_ != null ? other.stat_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCard Clone() {
      return new CharCard(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "NormalSkill" field.</summary>
    public const int NormalSkillFieldNumber = 4;
    private global::Cproto.SkillSlot normalSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cproto.SkillSlot NormalSkill {
      get { return normalSkill_; }
      set {
        normalSkill_ = value;
      }
    }

    /// <summary>Field number for the "Skills" field.</summary>
    public const int SkillsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cproto.SkillSlot> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(42, global::Cproto.SkillSlot.Parser);
    private readonly pbc::RepeatedField<global::Cproto.SkillSlot> skills_ = new pbc::RepeatedField<global::Cproto.SkillSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cproto.SkillSlot> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "passiveSkills" field.</summary>
    public const int PassiveSkillsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cproto.SkillSlot> _repeated_passiveSkills_codec
        = pb::FieldCodec.ForMessage(50, global::Cproto.SkillSlot.Parser);
    private readonly pbc::RepeatedField<global::Cproto.SkillSlot> passiveSkills_ = new pbc::RepeatedField<global::Cproto.SkillSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cproto.SkillSlot> PassiveSkills {
      get { return passiveSkills_; }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Cproto.EquipSlot> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(58, global::Cproto.EquipSlot.Parser);
    private readonly pbc::RepeatedField<global::Cproto.EquipSlot> equips_ = new pbc::RepeatedField<global::Cproto.EquipSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cproto.EquipSlot> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "Stat" field.</summary>
    public const int StatFieldNumber = 8;
    private global::Cproto.StatInfo stat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cproto.StatInfo Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(NormalSkill, other.NormalSkill)) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if(!passiveSkills_.Equals(other.passiveSkills_)) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if (!object.Equals(Stat, other.Stat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (normalSkill_ != null) hash ^= NormalSkill.GetHashCode();
      hash ^= skills_.GetHashCode();
      hash ^= passiveSkills_.GetHashCode();
      hash ^= equips_.GetHashCode();
      if (stat_ != null) hash ^= Stat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (normalSkill_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NormalSkill);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      passiveSkills_.WriteTo(output, _repeated_passiveSkills_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      if (stat_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Stat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (normalSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalSkill);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      size += passiveSkills_.CalculateSize(_repeated_passiveSkills_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (stat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharCard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.normalSkill_ != null) {
        if (normalSkill_ == null) {
          normalSkill_ = new global::Cproto.SkillSlot();
        }
        NormalSkill.MergeFrom(other.NormalSkill);
      }
      skills_.Add(other.skills_);
      passiveSkills_.Add(other.passiveSkills_);
      equips_.Add(other.equips_);
      if (other.stat_ != null) {
        if (stat_ == null) {
          stat_ = new global::Cproto.StatInfo();
        }
        Stat.MergeFrom(other.Stat);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            if (normalSkill_ == null) {
              normalSkill_ = new global::Cproto.SkillSlot();
            }
            input.ReadMessage(normalSkill_);
            break;
          }
          case 42: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 50: {
            passiveSkills_.AddEntriesFrom(input, _repeated_passiveSkills_codec);
            break;
          }
          case 58: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 66: {
            if (stat_ == null) {
              stat_ = new global::Cproto.StatInfo();
            }
            input.ReadMessage(stat_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
